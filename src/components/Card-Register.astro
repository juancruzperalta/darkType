<div class="flex  flex-col md:flex-row md:h-[600px] items-center justify-center rounded-md relative">
    <form id="formLogin" class="flex flex-col gap-4 w-[100%] md:w-[450px] md:mt-2 mt-6 p-3">
    <div class="font-bold md:text-3xl flex gap-1 text-2xl"><svg class="w-7 h-7 fill-gray-200"  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512l362.8 0c-5.4-9.4-8.6-20.3-8.6-32l0-128c0-2.1 .1-4.2 .3-6.3c-31-26-71-41.7-114.6-41.7l-91.4 0zM528 240c17.7 0 32 14.3 32 32l0 48-64 0 0-48c0-17.7 14.3-32 32-32zm-80 32l0 48c-17.7 0-32 14.3-32 32l0 128c0 17.7 14.3 32 32 32l160 0c17.7 0 32-14.3 32-32l0-128c0-17.7-14.3-32-32-32l0-48c0-44.2-35.8-80-80-80s-80 35.8-80 80z"/></svg>
      <span>
        Login
      </span>
    </div>
    <input class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="email" name="LoginEmail" id="LoginEmail" placeholder="Email">
    <input class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="password" name="LoginPassword" id="LoginPassword" placeholder="Password">
    <button type="submit" id="submitLogin" class=" bg-[#2c0076]  text-gray-200 text-xl font-bold p-4 rounded-md border-none disabled:opacity-90">Sign In</button>
          <div class="hidden p-4 bg-green-500 rounded-md" id="messageLogin"></div>
</form>
  <form id="formRegister" class="flex flex-col gap-4 w-[100%] md:w-[450px]  md:mt-2 mt-6 p-3">
    <div class="font-bold md:text-3xl flex gap-1 text-2xl"><svg class="w-7 h-7 fill-gray-200 " xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M96 128a128 128 0 1 1 256 0A128 128 0 1 1 96 128zM0 482.3C0 383.8 79.8 304 178.3 304l91.4 0C368.2 304 448 383.8 448 482.3c0 16.4-13.3 29.7-29.7 29.7L29.7 512C13.3 512 0 498.7 0 482.3zM504 312l0-64-64 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l64 0 0-64c0-13.3 10.7-24 24-24s24 10.7 24 24l0 64 64 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-64 0 0 64c0 13.3-10.7 24-24 24s-24-10.7-24-24z"/></svg>
      <span>
        Register
      </span>
    </div>
        <input class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="text" 
    name="userName" 
    id="userName" 
    placeholder="User Name" 
    required       
    title="User Name is required" >
    <input class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="email" 
    name="email" 
    id="emailRegister" 
    placeholder="Email" 
    required       
    pattern="^[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})$"
    title="Email is required" >
    <input 
    class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="email" 
    name="verifyEmail" 
    id="verifyEmail" 
    placeholder="verify Email" 
    required       
    pattern="^[a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,15})$"
    title="Email is required"
    >
    <input 
    class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="password" 
    name="password" 
    id="passwordRegister" 
    placeholder="Password" 
    required 
    title="Password is required">
  <input 
  class="p-4 outline-none bg-[#23252b] placeholder:text-gray-200 rounded-md border-none font-semibold text-xl" type="password" 
  name="verifyPassword" 
  id="verifyPassword" 
  placeholder="verify Password"
  required 
  title="Password is required">
      <button type="submit" id="submitRegister" class="bg-[#2c0076] text-gray-200 text-xl font-bold  p-4 rounded-md border-none disabled:opacity-90">Sign Up</button>
      <div class="hidden p-4 bg-red-500 rounded-md" id="messageError"></div>
    </form>
</div>

<script>
import { supabase } from '../supabaseClient.js';
const messageError = document.querySelector('#messageError');
const formRegister = document.getElementById('formRegister');
const messageLogin = document.getElementById('messageLogin');
const formLogin = document.getElementById('formLogin');
const submitLogin = document.querySelector('#submitLogin');
const submitRegister = document.querySelector('#submitRegister');
const isLoggedIn = localStorage.getItem('isLoggedIn');
const messageErrorFunc = (msg) => {
  messageError.classList.remove('hidden');
  messageError.classList.add('flex');
  messageError.textContent = msg;
  setTimeout(() => {
    messageError.classList.add('hidden');
    messageError.classList.remove('flex');
  }, 3000);
}
async function checkEmailInProfiles(email) {
  const { data, error } = await supabase
    .from('profiles')
    .select('email')
    .eq('email', email);

  if (error) {
    console.error("Error checking email in profiles:", error);
    return false;
  }

  return data.length > 0; // Retorna true si el email ya existe
}
async function registerUser(userName, email, password) {
   const emailExists = await checkEmailInProfiles(email);

  if (emailExists) {
    messageErrorFunc("The email is already registered.");
    return;
  }
  if (userName.length > 10) {
    messageErrorFunc("The username must be less than 10 characters");
    return;
  }

  // Intentar el registro con Supabase
  const { data, error } = await supabase.auth.signUp({
    email: email,
    password: password,
    options: {
      data: {
        username: userName
      }
    }
  });
  if (data) {
    const { error: profileError } = await supabase
      .from('profiles')
      .insert([{ id: data.user.id, email: email, username: userName }]);

    if (profileError) {
      messageErrorFunc(`Error inserting profile: ${profileError.message}`);
    } else {
      messageErrorFunc(`Please check your email to confirm registration for ${email}`);
    }
  }
  return { data, error }; 
}

const messageLoginFunc = (msg) => {
  messageLogin.classList.remove('hidden');
  messageLogin.classList.add('flex');
  messageLogin.textContent = msg;
  setTimeout(() => {
    messageLogin.classList.add('hidden');
    messageLogin.classList.remove('flex');
  }, 3000);
}
formRegister.addEventListener('submit', async (e) => {
  if(!isLoggedIn){
  e.preventDefault();

  const userName = document.getElementById('userName').value;
  const email = document.getElementById('emailRegister').value;
  const verifyEmail = document.getElementById('verifyEmail').value;
  const password = document.getElementById('passwordRegister').value;
  const verifyPassword = document.getElementById('verifyPassword').value;
  if (email !== verifyEmail || password !== verifyPassword) {
    messageErrorFunc("Emails or password don't match");
    return;
  }

  if (email === '' || verifyEmail === '' || password === '' || verifyPassword === '' || userName === ' ') {
    messageErrorFunc("You must enter all fields");
    return;
  }

  const response = await registerUser(userName, email, password);
  formRegister.reset();
  }
});
async function loginUser(email, password) {
  const { data, error } = await supabase.auth.signInWithPassword({
  email: email,
  password: password,
});
  if(error){
    messageLoginFunc("Error to LoggedIn");
  }
  const {data:{user}} = await supabase.auth.getUser();
    localStorage.setItem('userName', user.user_metadata.username);
    localStorage.setItem('isLoggedIn', 'true');
  return { data };
}
formLogin.addEventListener('submit', async (e) => {
  e.preventDefault();

  // Obtener los valores del formulario
  const email = document.getElementById('LoginEmail').value;
  const password = document.getElementById('LoginPassword').value;
  // Validar que ambos campos tengan contenido
  if (!email || !password) {
    messageLoginFunc('You must enter two fields');
    return;
  }

  // Llamar a la funciÃ³n de login
  const response = await loginUser(email, password);
  if (response.error) {
    messageLoginFunc('Error in credentials');
  } else {
    messageLoginFunc('Successful loggedIn');
    setTimeout(() => {
      
      location.reload();
      location.pathname = '/';
    }, 1000);
  }

});

if(isLoggedIn){
  submitLogin.disabled = true;
  submitRegister.disabled = true;
}else{
    submitLogin.disabled = false;
  submitRegister.disabled = false;
}
  </script>