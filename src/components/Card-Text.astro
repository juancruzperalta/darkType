
<div class="mt-8 p-4 max-w-[1200px]">
  <time id="time_initial"></time>    
  <p class="text-gray-500 mt-4 text-[2.5rem]" id="parraf"></p>

        <input autofocus class="opacity-0">
        
</div>
<div id="endGame" class=" hidden flex items-center justify-center flex-col">
  <h1 class="text-[4.8rem] text-blue-400 font-semibold mb-4">End Game</h1>
  <div class="grid grid-cols-2 w-[100%] items-center justify-center text-center gap-2">
    <span class="text-5xl  font-semibold" id="accuracyEnd"></span>
    <span class="text-5xl  font-semibold" id="wordsCompleted"></span>
    <span class="text-5xl  font-semibold" id="wpmEnd"></span>
    <span class="text-5xl  font-semibold" id="wordsIncompleted"></span>
     <span class="text-5xl  font-semibold" id="timeTranscurred"></span>   
    <span class="text-5xl  font-semibold" id="LetterErr"></span>
      </div>
      <button class="hidden mt-4" id="restartGame"><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-red-400 w-14 h-14">
    <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" /></button>
</div>
<script>
import { supabase } from "../supabaseClient";

  const $input = document.querySelector('input');
  const $parraf = document.querySelector('#parraf');
  const $time_initial = document.querySelector('#time_initial')
  const TIME = 50;
  let TEXT = ' ',
  Time_Initial = TIME,
  timeStart=false,
  correctWords= 0,
  incorrectsWords=0,
  incorrectLetters=0,
  correctLetters=0,
  totalWords=0,
  accuracy=0,
  wpm=0,
  timeInterval;

  function totalWordParraf(){
    return $parraf.querySelectorAll('x-letter').length;
  }
  function totalLetterCorrect(){
    return $parraf.querySelectorAll('x-letter.Correct').length;
  }  
  function totalWordCorrect(){
    return $parraf.querySelectorAll('x-word.Correct').length;
  }
    function totalWordIncorrect(){
    return $parraf.querySelectorAll('x-word.marked').length;
  }   
  function totalLetterIncorrect(){
    return $parraf.querySelectorAll('x-letter.Incorrect').length;
  }    
fetch('https://dummyjson.com/posts')
  .then(response => response.json())
  .then(data => {
    const totalPosts = data.posts.length;
    const numberRandom = Math.floor(Math.random() * totalPosts);
    const postRandom = data.posts[numberRandom];
    TEXT = postRandom.body;
    $parraf.textContent = TEXT;
    initGame();
  });
  initEvents();
  let words=[];
  // Iniciamos todo el juego
   function initGame(){ 
     $parraf.classList.remove('hidden');
     $time_initial.classList.remove('hidden');
        $input.value="";
    words = TEXT.split(' ').slice(0,32);
  
    $parraf.innerHTML = words.map((word, index)=>{
      const letters = word.split('')

      return `
        <x-word>
          ${letters.map(letter => `<x-letter>${letter}</x-letter>`)
          .join('')
        }
          </x-word>
      `
    }).join('');

    totalWords = totalWordParraf();
    const firstWord = $parraf.querySelector('x-word');
    firstWord.classList.add('active');  
    firstWord.querySelector('x-letter').classList.add('active');
  }
  // Actualizamos el tiempo de juego
  function uploadTime(){
    if(!timeStart){
    timeStart=true;
    $time_initial.textContent=Time_Initial;
    timeInterval= setInterval(() => {
      if(Time_Initial > 0){
      Time_Initial--;
      $time_initial.textContent=Time_Initial;
      }else{
        endGame();
        clearInterval(timeInterval);
      }
    }, 1000);
  }
}
// Lo hacemos siempre que se aprete una tecla, el juego arranca.
    document.addEventListener('keydown',  uploadTime);
// Iniciamos los eventos.  
  function initEvents(){
  document.addEventListener('keydown', ()=>{
    $input.focus()
  })
  $input.addEventListener('keydown', onKeyDown);
  $input.addEventListener('keyup', onKeyUp);
  }
  // Función al terminar el juego, muestra resultados etc.
  async function endGame(){
    // Selectors
    const btnRestart = document.querySelector('#restartGame'),
     wpmEnd = document.querySelector('#wpmEnd'),
     endGame = document.querySelector('#endGame'),
     letterErr = document.querySelector('#LetterErr'),
     wordsCompleted = document.querySelector('#wordsCompleted'),
     wordsIncompleted = document.querySelector('#wordsIncompleted'),
     timeTranscurred = document.querySelector('#timeTranscurred'),
     accuracyEnd = document.querySelector('#accuracyEnd');
    // onEndGame
      btnRestart.disabled=false;
      clearInterval(timeInterval);
      $input.value="";
      $input.disabled=true;
    // Count..
      correctLetters = totalLetterCorrect();
      incorrectLetters = totalLetterIncorrect();
      correctWords=totalWordCorrect();
      incorrectsWords = totalWordIncorrect();

    // Class remove
      btnRestart.classList.remove('hidden');
      endGame.classList.remove('hidden');
    // Class add
    $parraf.classList.add('hidden');
    $time_initial.classList.add('hidden');

    //Calculs
    accuracy = (correctLetters / totalWords) * 100;
    let timeElapsed = (TIME - Time_Initial);
    wpm = (correctLetters/timeElapsed);
       const wpmValue = parseFloat(wpm).toFixed(2);
    const accuracyValue = parseFloat(accuracy).toFixed(2);
    const correctWordsValue = parseFloat(correctWords);
    // TextContent
    wpmEnd.textContent =`WPM: ${wpmValue}`;
    timeTranscurred.textContent = `Time Transcurred: ${timeElapsed}s`
    accuracyEnd.textContent =`Accuracy: ${accuracyValue}%`;
    letterErr.textContent = `Letter Error: ${incorrectLetters}`
    wordsCompleted.textContent = `Words Completed: ${correctWordsValue}`;
    wordsIncompleted.textContent = `Words Incompleted: ${incorrectsWords}`
    const { data: { user } } = await supabase.auth.getUser();
    if(user){
      await updateOrInsertInTheDB(wpmValue, accuracyValue);
    }
    btnRestart.addEventListener('click',(e)=>{
      initGame();
      $input.disabled=false;
      Time_Initial = TIME;
      $time_initial.textContent = Time_Initial;
      timeStart=false;
      endGame.classList.add('hidden');
      btnRestart.classList.add('hidden');
      btnRestart.disabled=true;
    })
  }
  async function updateOrInsertInTheDB(wpmValue, accuracyValue){
    const { data: { user } } = await supabase.auth.getUser();
const { data: existingRecord, error: fetchError } = await supabase
  .from('score')
  .select('*')
  .eq('id', user.id)
  .maybeSingle();  // Esto no lanzará un error si no hay registros

if (fetchError) {
  console.error("Error fetching record:", fetchError);
  return;
}
  let dateNow = Date.now();
  const dateValue = new Date(dateNow); // Convertir a una fecha
  if (existingRecord) {
  updateScoreInTheDB(wpmValue, existingRecord.wpm, accuracyValue, existingRecord.accuracy,dateValue, user.id)
}else{
  insertScoreInTheDB(wpmValue, accuracyValue, dateValue, user);
}

}
  async function updateScoreInTheDB(wpmValue, currentWpm, accuracyValue, currentAccuracy, dateValue, userId){
   const { data, error } = await supabase
      .from('score')
      .update({
        wpm: Math.max(wpmValue, currentWpm),
        accuracy: Math.max(accuracyValue, currentAccuracy),
        date: dateValue,
      })
      .eq('id', userId);

      console.log(data);
      console.log(error);
  }
  async function insertScoreInTheDB(wpmValue, accuracyValue,dateValue, user){
      const username = user.user_metadata.username;
    if (isNaN(wpmValue) || isNaN(accuracyValue)) {
        console.error('Error: One or two values is not valid.', { wpmValue, accuracyValue});
        return;
      }
    const { data, error } = await supabase.from('score').insert([
          {
            id: user.id,
            user_name: username,
            wpm: wpmValue,
            accuracy: accuracyValue,
            date: dateValue,
          }
        ]);


  }
    // Donde apreta algún tipo de tecla hace el juego comprueba que apretó, y cuál era la tecla, y así va hasta el final, dónde la última tira el ENDGAME.
  function onKeyDown(e){
  const $currentWord = $parraf.querySelector('x-word.active');
  const $currentLetter = $currentWord ? $currentWord.querySelector('x-letter.active') : null;
  
  const { key } = e;
  if(key === ' '){
    e.preventDefault();
    const $nextWord = $currentWord.nextElementSibling;
    const $nextLetter =$nextWord.querySelector('x-letter');

    $input.value='';
    $currentWord.classList.remove('active' , 'marked')
    $currentLetter.classList.remove('active')
    $nextWord.classList.add('active')
    $nextLetter.classList.add('active')
    const LettersMissed = $currentWord.querySelectorAll('x-letter:not(.Correct)').length >0

    LettersMissed ? $currentWord.classList.add('marked') : $currentWord.classList.add('Correct');
    
  }
  if (!$currentWord.nextElementSibling && !$currentLetter.nextElementSibling) {
    endGame();
    return;
  }

     if(key === 'Backspace'){
      const $prevWord = $currentWord.previousElementSibling
    const $prevLetter = $currentLetter.previousElementSibling

    if(!$prevWord && !$prevLetter){
      e.preventDefault();
      return;
    }
    const $wordMarked = $parraf.querySelector('x-word.marked')
    if(!$prevLetter && $wordMarked){
      e.preventDefault();
      $prevWord.classList.remove('marked')
      $prevWord.classList.add('active')

      const $letterToGo = $prevWord.querySelector('x-letter:last-child');
      $currentLetter.classList.remove('active')
      $letterToGo.classList.add('active')

      $input.value = [
        ...$prevWord.querySelectorAll('x-letter.Correct, x-letter.Incorrect')].map($el => 
        
        {return $el.classList.contains('Correct') ? $el.innerText : '*'}).join('')
        
      }
    }
  }
  function onKeyUp(){
  const $currentWord = $parraf.querySelector('x-word.active');
  const $currentLetter = $currentWord.querySelector('x-letter.active')
  const currentWord = $currentWord.innerText.trim();
  $input.maxLength = currentWord.length;
  const $allLetters = $currentWord.querySelectorAll('x-letter');
  $allLetters.forEach($letter => $letter.classList.remove('Correct', 'Incorrect'))
  $input.value.split('').forEach((char, index)=>{
    const $letter = $allLetters[index]
    const letterToCheck = currentWord[index]
    const isCorrect = char === letterToCheck
    
    const letterClass = isCorrect ? 'Correct' : 'Incorrect';

    $letter.classList.add(letterClass);
  })
  $currentLetter.classList.remove('active');
  const inputLength = $input.value.length;
  const nextActiveLetter = $allLetters[inputLength];

  if(nextActiveLetter){
    nextActiveLetter.classList.add('active');
  }else{
    $currentLetter.classList.add('active', 'is-last')
  }
}
</script>