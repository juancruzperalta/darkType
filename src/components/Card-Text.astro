<div class="mt-8 p-12">
      <p class="text-gray-500 mt-4 text-4xl" id="parraf"></p>
        <input autofocus class="opacity-0">
        <button><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0 3.181 3.183a8.25 8.25 0 0 0 13.803-3.7M4.031 9.865a8.25 8.25 0 0 1 13.803-3.7l3.181 3.182m0-4.991v4.99" /></button>
</div>
<style is:global>
   section{
    width: 800px;
  }
  x-letter{
    position: relative;
    margin-left: 0.1rem;
    &.active::before{
      content: '|';
      color: #843dff;
      position: absolute;
      left: -.35rem;
      animation: keyUp 3s infinite ease-in-out;
    }
    &.Correct{
      color:rgb(209 213 219);
    }
    &.Incorrect{
      color:rgb(241, 11, 11);
    }

    &.active.is-last::before{
      left: 112%;
    }
  }
  x-word{
    &.marked{
      border-bottom: 1px solid rgb(241, 11, 11);
    }
    margin-left: .5rem;
  }
  @keyframes keyUp{
    25% {
      transform: scale(1.1);
    }
    50%{
      transform: scale(1.3);
    }
    25% {
      transform: scale(1.1);
    }
  }
</style>
<script>


  const $input = document.querySelector('input');
  const $parraf = document.querySelector('#parraf');
  let TEXT = ' ';
  
fetch('https://dummyjson.com/posts')
  .then(response => response.json())
  .then(data => {
    const totalPosts = data.posts.length;
    const numberRandom = Math.floor(Math.random() * totalPosts);
    const postRandom = data.posts[numberRandom];
    TEXT = postRandom.body;
    $parraf.textContent = TEXT;
    initGame();
  });
  initEvents();
  let words=[];
   function initGame(){ 
    words = TEXT.split(' ').slice(0,32);

    $parraf.innerHTML = words.map((word, index)=>{
      const letters = word.split('')

      return `
        <x-word>
          ${letters.map(letter => `<x-letter>${letter}</x-letter>`)
          .join('')
        }
          </x-word>
      `
    }).join('');

    const firstWord = $parraf.querySelector('x-word');
    firstWord.classList.add('active');  
    firstWord.querySelector('x-letter').classList.add('active');

  }
  function initEvents(){
  document.addEventListener('keydown', ()=>{
    $input.focus()
  })
  $input.addEventListener('keydown', onKeyDown);
  $input.addEventListener('keyup', onKeyUp);
  }

  function onKeyDown(e){
  const $currentWord = $parraf.querySelector('x-word.active');
  const $currentLetter = $currentWord.querySelector('x-letter.active')
  const { key } = e;
  if(key === ' '){
    e.preventDefault();

    const $nextWord = $currentWord.nextElementSibling
    const $nextLetter = $nextWord.querySelector('x-letter')
    $input.value='';
    $currentWord.classList.remove('active' , 'marked')
    $currentLetter.classList.remove('active')

    $nextWord.classList.add('active')
    $nextLetter.classList.add('active')

    const LettersMissed = $currentWord.querySelectorAll('x-letter:not(.Correct)').length >0

    LettersMissed ? $currentWord.classList.add('marked') : $currentWord.classList.add('Correct');
    }
     if(key === 'Backspace'){
      const $prevWord = $currentWord.previousElementSibling
    const $prevLetter = $currentLetter.previousElementSibling

    if(!$prevWord && !$prevLetter){
      e.preventDefault();
      return;
    }
    const $wordMarked = $parraf.querySelector('x-word.marked')
    if(!$prevLetter && $wordMarked){
      e.preventDefault();
      $prevWord.classList.remove('marked')
      $prevWord.classList.add('active')

      const $letterToGo = $prevWord.querySelector('x-letter:last-child');
      $currentLetter.classList.remove('active')
      $letterToGo.classList.add('active')

      $input.value = [
        ...$prevWord.querySelectorAll('x-letter.Correct, x-letter.Incorrect')].map($el => 
        
        {return $el.classList.contains('Correct') ? $el.innerText : '*'}).join('')
        
      }
    }
  }
  function onKeyUp(){
  const $currentWord = $parraf.querySelector('x-word.active');
  const $currentLetter = $currentWord.querySelector('x-letter.active')
  const currentWord = $currentWord.innerText.trim();
  $input.maxLength = currentWord.length;

  const $allLetters = $currentWord.querySelectorAll('x-letter');
  $allLetters.forEach($letter => $letter.classList.remove('Correct', 'Incorrect'))

  $input.value.split('').forEach((char, index)=>{
    const $letter = $allLetters[index]
    const letterToCheck = currentWord[index]
    const isCorrect = char === letterToCheck
    
    const letterClass = isCorrect ? 'Correct' : 'Incorrect';

    $letter.classList.add(letterClass);
  })
  $currentLetter.classList.remove('active');
  const inputLength = $input.value.length;
  const nextActiveLetter = $allLetters[inputLength];

  if(nextActiveLetter){
    nextActiveLetter.classList.add('active');
  }else{
    $currentLetter.classList.add('active', 'is-last')
  }
}
</script>